using System;
using System.Collections.Generic;
using System.Threading;

namespace MentalWellnessApp
{
    // Базовый класс для всех активностей
    abstract class Activity
    {
        protected string _name;
        protected string _description;
        protected int _duration;

        public Activity(string name, string description)
        {
            _name = name;
            _description = description;
        }

        public void StartActivity()
        {
            Console.Clear();
            Console.WriteLine($"Starting {_name} Activity");
            Console.WriteLine(_description);

            Console.Write("Enter the duration in seconds: ");
            while (!int.TryParse(Console.ReadLine(), out _duration) || _duration <= 0)
            {
                Console.WriteLine("Invalid input. Please enter a positive integer for the duration.");
                Console.Write("Enter the duration in seconds: ");
            }

            Console.WriteLine("Get ready to begin...");
            PauseWithAnimation(3); // Pause for 3 seconds with animation
            Console.Clear();
            PerformActivity();

            EndActivity();
        }

        protected abstract void PerformActivity(); // Абстрактный метод для реализации конкретной активности

        protected void PauseWithAnimation(int seconds)
        {
            for (int i = seconds; i > 0; i--)
            {
                Console.Write($"Pausing... {i} ");
                Thread.Sleep(1000);
                Console.Write("\r" + new string(' ', Console.WindowWidth - 1) + "\r"); // Clear the line
            }
        }
       protected void PauseWithSpinner(int milliseconds)
        {
            char[] spinner = { '|', '/', '-', '\\' };
            int counter = 0;

            DateTime endTime = DateTime.Now.AddMilliseconds(milliseconds);
            while (DateTime.Now < endTime)
            {
                Console.Write($"\r{spinner[counter % spinner.Length]}");
                Thread.Sleep(100);
                counter++;
            }
            Console.Write("\r" + new string(' ', Console.WindowWidth - 1) + "\r"); // Clear the line
        }

        private void EndActivity()
        {
            Console.WriteLine("Good job!");
            PauseWithAnimation(2); // Pause for 2 seconds with animation
            Console.WriteLine($"You have completed the {_name} activity for {_duration} seconds.");
            PauseWithAnimation(3); // Pause for 3 seconds with animation
            Console.Clear();
        }
    }

    // Класс для дыхательной активности
    class BreathingActivity : Activity
    {
        public BreathingActivity() : base("Breathing", "This activity will help you relax by walking your through breathing in and out slowly. Clear your mind and focus on your breathing.") { }

        protected override void PerformActivity()
        {
            DateTime endTime = DateTime.Now.AddSeconds(_duration);
            while (DateTime.Now < endTime)
            {
                Console.WriteLine("Breathe in...");
                PauseWithAnimation(2);
                Console.WriteLine("Breathe out...");
                PauseWithAnimation(2);
            }
        }
    }

    // Класс для рефлексивной активности
    class ReflectionActivity : Activity
    {
        private List<string> _prompts = new List<string>
        {
            "Recall a time when you stood up for someone else.",
            "Recall a time when you did something really difficult.",
            "Recall a time when you helped someone in need.",
            "Think of a time when you did something truly selfless."
        };

        private List<string> _questions = new List<string>
        {
            "Why was this experience meaningful to you?",
            "Have you ever done anything like this before?",
            "How did you get started?",
            "What did you feel like when it was all over?",
            "What makes this time different than other times when you were not as successful?",
            "What do you like most about this experience?",
            "What could you learn from this experience that applies to other situations?",
            "What did you learn about yourself through this experience?",
            "How can you keep this experience in mind in the future?"
        };

        public ReflectionActivity() : base("Reflection", "This activity will help you reflect on times in your life when you have shown strength and resilience. This will help you recognize the power you have and how you can use it in other aspects of your life.") { }

        protected override void PerformActivity()
        {
            Random random = new Random();
            DateTime endTime = DateTime.Now.AddSeconds(_duration);

            while (DateTime.Now < endTime)
            {
                string prompt = _prompts[random.Next(_prompts.Count)];
                Console.WriteLine(prompt);
                PauseWithSpinner(5000);

                string question = _questions[random.Next(_questions.Count)];
                Console.WriteLine(question);
                PauseWithSpinner(5000);
            }
        }
    }

    // Класс для активности перечисления
    class ListingActivity : Activity
    {
        private List<string> _prompts = new List<string>
        {
            "Who are people that you appreciate?",
            "What are personal strengths of yours?",
            "Who are people that you have helped this week?",
            "When have you felt the Holy Ghost this month?",
            "Who are some of your personal heroes?"
        };

        private int _itemCount;

        public ListingActivity() : base("Listing", "This activity will help you reflect on the good things in your life by having you list as many things as you can in a certain area.") { }

        protected override void PerformActivity()
        {
            Random random = new Random();
            string prompt = _prompts[random.Next(_prompts.Count)];
            Console.WriteLine(prompt);

            Console.WriteLine("Get ready...");
            PauseWithAnimation(3);

            Console.WriteLine("Start listing items:");
            DateTime endTime = DateTime.Now.AddSeconds(_duration);
            _itemCount = 0;

            while (DateTime.Now < endTime)
            {
                Console.Write("> ");
                Console.ReadLine(); // Read the item (not actually used for validation but keeps activity going)
                _itemCount++;
            }

            Console.WriteLine($"You listed {_itemCount} items!");
            PauseWithAnimation(2);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            while (true)
            {
                Console.WriteLine("Mental Wellness App Menu:");
                Console.WriteLine("1. Breathing Activity");
                Console.WriteLine("2. Reflection Activity");
                Console.WriteLine("3. Listing Activity");
                Console.WriteLine("4. Exit");

                Console.Write("Choose an activity (1-4): ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        BreathingActivity breathingActivity = new BreathingActivity();
                        breathingActivity.StartActivity();
                        break;
                    case "2":
                        ReflectionActivity reflectionActivity = new ReflectionActivity();
                        reflectionActivity.StartActivity();
                        break;
                    case "3":
                        ListingActivity listingActivity = new ListingActivity();
                        listingActivity.StartActivity();
                        break;
                    case "4":
                        Console.WriteLine("Exiting the program. Goodbye!");
                        return;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
        }
    }
}
